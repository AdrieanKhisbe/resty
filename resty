#
# resty - A tiny command line REST interface for bash and zsh.
#
# Fork me on github:
#   http://github.com/micha/resty
#
# Author:
#   Micha Niskin <micha@thinkminimo.com>
#   Copyright 2009, no rights reserved.
#
# Maintener:
#   Adriean Khisbe <adriean.khisbe@live.com>
#


export _resty_host="" # TODO: to upper case!
export _resty_path=""
export _resty_nohistory=""


# TODO: global var holers
export _RESTY_DATA_DIR _RESTY_CONF_DIR;


function resty() {

    if [ -n "$XDG_CONFIG_HOME" ]; then
	_RESTY_CONF_DIR="$XDG_CONFIG_HOME/resty"
	_RESTY_DATA_DIR="$XDG_DATA_HOME/resty"
    else
	_RESTY_CONF_DIR="$HOME/.resty"
	_RESTY_DATA_DIR="$_RESTY_CONF_DIR"
    fi
    mkdir -p "$_RESTY_CONF_DIR"

    local host="$_RESTY_DATA_DIR/host"

    local url=$1

    case "$url" in
	http://*|https://*)
	    _resty_opts=$(printf '%q ' "${curlopt[@]}")
	    export _resty_opts
	    echo "$url" |grep '\*' >/dev/null || url="${url}*"
	    (echo "$url" |tee "${_resty_nohistory:-$host}") |cat 1>&2 \
		&& _resty_host="$url"
	    ;;
	*)
	    resty "http://$url" "${@[@]}"
	    ;;
    esac
}



function resty-call() {
    # maaybe: check # HEAD|OPTIONS|GET|DELETE|POST|PUT|PATCH|TRACE)

    local -a curlopt
    local -a curlopt2

    # TODO: local to reset
    local host="$_RESTY_DATA_DIR/host"
    local cookies="$_RESTY_DATA_DIR/c"

    local method="$1"; [[ $# > 0 ]] && shift
    local h2t=$((exec 2>&-; (which lynx >/dev/null && echo lynx -stdin -dump) \
			  || which html2text || which cat) |tail -n 1)
    local editor=$((exec 2>&-; which "$EDITOR" || which vim || echo "vi") |tail -n 1)         # editor default

    if [[ "POST PUT TRACE DELETE" =~ "$method" ]]; then local hasbody="yes" ;fi

    [ -d "$cookies" ] || (mkdir -p "$cookies"; echo "http://localhost*" > "$host")      # retrieve cookie
    if [[ "$1"  =~ "^/" ]] ; then  # retrieve path
	local _path="$1";
	[[ $# > 0 ]] && shift
    fi
    if [[ ! "$1"  =~ "^-" ]] ; then  # retrieve  data
	local body="$1"
	[[ $# > 0 ]] && shift
    fi

    local raw query vimedit quote maybe_query
    j=1
    # TODO: use an option parser or a switch
    for i in "$@"; do
	[ -n "$maybe_query" -a -z "$query" ] && query="?$i" && continue
	([ "$i" = "--verbose" ] || echo "$i" | grep '^-[a-zA-Z]*v[a-zA-Z]*$' >/dev/null) \
	    &&  verbose="yes" && continue
	[ "$i" = "-V" ] && vimedit="yes" && continue
	[ "$i" = "-Z" ] && raw="yes" && continue
	[ "$i" = "-W" ] && continue
	[ "$i" = "-Q" ] && quote="yes" && continue
	[ "$i" = "-q" ] && maybe_query="yes" && continue
	curlopt[j]="$i" && j=$((j + 1))
    done

    [ -z "$quote" ] && _path=$(echo "$_path"|sed 's/%/%25/g;s/\[/%5B/g;s/\]/%5D/g;s/|/%7C/g;s/\$/%24/g;s/&/%26/g;s/+/%2B/g;s/,/%2C/g;s/:/%3A/g;s/;/%3B/g;s/=/%3D/g;s/?/%3F/g;s/@/%40/g;s/ /%20/g;s/#/%23/g;s/{/%7B/g;s/}/%7D/g;s/\\/%5C/g;s/\^/%5E/g;s/~/%7E/g;s/`/%60/g')

    if [[ "HEAD OPTIONS" =~ "$method" ]] ; then raw="yes" ; fi
    [ -z "$_resty_host" ] && local _resty_host=$(cat "$host" 2>/dev/null)
    [ "$method" = "-v" ] && echo "$_resty_host $_resty_opts" && return
    [ -z "$method" ] && echo "$_resty_host" && return
    [ -n "$_path" ] && _resty_path=$_path
    local domain=$(echo -n "$_resty_host" \
		    |perl -ane '/^https?:\/\/([^\/\*]+)/; print $1')
    local _path="${_resty_host//\*/$_resty_path}"

    eval "curlopt2=(${_resty_opts[*]})"
    # todo refactor
    local body=$( ( [ "$hasbody" = "yes" ] \
		  && ( ( [ -n "$body" ] && echo "$body") \
			   || ([ ! -t 0 ] && echo "@-") ) ) || echo)

    if [ "$hasbody" = "yes" ] && [ "$vimedit" = "yes" ]; then
	loxal tmpf=$(mktemp /tmp/resty.XXXXXX)
	[ -t 0 ] || cat > $tmpf
	(exec < /dev/tty; "$editor" $tmpf)
	body=$(cat $tmpf)
	rm -f $tmpf
    fi

    [ -n "$body" ] && [ "$body" != "@-" ] && [[ $# > 0 ]] && shift
    [ "$1" = "-Z" ] && raw="yes" && [[ $# > 0 ]] && shift
    [ -n "$body" ] && opt="--data-binary"
    [ "$method" = "HEAD" ] && opt="-I" && raw="yes"

    ## Retrieve stored option in config dir.
    ## Â§maybe: cache this when resty)
    [ -f "$_RESTY_CONF_DIR/$domain" ] && eval "args2=( $(cat "$_RESTY_CONF_DIR/$domain" 2>/dev/null |sed 's/^ *//' |grep ^$method |cut -b $((${#method}+2))-) )"
    local res=$((((curl -sLv $opt "$body" -X $method \
		  -b "$cookies/$domain" -c "$cookies/$domain" \
		  "${args2[@]}" "${curlopt2[@]}" "${curlopt[@]}" "$_path$query" \
		    |sed 's/^/OUT /' && echo) 3>&2 2>&1 1>&3) \
	       |sed 's/^/ERR /' && echo) 2>&1)
    local out=$(echo "$res" |sed '/^OUT /s/^....//p; d')
    local err=$(echo "$res" |sed '/^ERR /s/^....//p; d')
    local ret=$(echo "$err" |sed \
			   '/^.*HTTP\/1\.[01] [0-9][0-9][0-9]/s/.*\([0-9]\)[0-9][0-9].*/\1/p; d' \
		 | tail -n1)
    [ -n "$err" -a -n "$verbose" ] && echo "$err" 1>&2
    echo "$err" | grep -i '^< \s*Content-Type:  *text/html' >/dev/null \
	&& [ -z "$raw" ] && d=$h2t || d=cat
    [ -n "$out" ] && out=$(echo "$out" |eval "$d")
    [ "$d" != "${d##lynx}" ] && out=$(echo "$out" |perl -e "\$host='$(echo "$_resty_host" |sed 's/^\(https*:\/\/[^\/*]*\).*$/\1/')';" -e '@a=<>; $s=0; foreach (reverse(@a)) { if ($_ =~ /^References$/) { $s++; } unless ($s>0) { s/^\s+[0-9]+\. //; s/^file:\/\/localhost/$host/; } push(@ret,$_); } print(join("",reverse(@ret)))')
    if [ "$ret" != "2" ]; then
	[ -n "$out" ] && echo "$out" 1>&2
	return $ret
    else
	[ -n "$out" ] && echo "$out"
    fi

}

function HEAD() {
    resty-call HEAD "$@"
}

function OPTIONS() {
    resty-call OPTIONS "$@"
}

function GET() {
    resty-call GET "$@"
}

function POST() {
    resty-call POST "$@"
}

function PUT() {
    resty-call PUT "$@"
}

function PATCH() {
    resty-call PATCH "$@"
}

function DELETE() {
    resty-call DELETE "$@"
}

function TRACE() {
    resty-call TRACE "$@"
}

[ "$1" = "-W" ] && export _resty_nohistory="/dev/null" && [[ $# -gt 0 ]] && shift

resty "$@" >/dev/null 2>&1
